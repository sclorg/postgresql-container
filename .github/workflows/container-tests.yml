on:
  issue_comment:
    types:
      - created
jobs:
  distgen-check:
    name: "Check distgen generated files"
    runs-on: ubuntu-20.04
    if: |
      github.event.issue.pull_request
      && (contains(github.event.comment.body, '[test]') || contains(github.event.comment.body, '[test-all]'))
      && contains(fromJson('["OWNER", "MEMBER"]'), github.event.comment.author_association)
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.issue.number }}/head"
          submodules: true

      - name: Check distgen generated files
        id: check
        shell: bash
        run: |
          sha=$(git rev-parse HEAD)
          sudo apt update && sudo apt -y install python3-pip
          pip3 install distgen
          result="success"
          ./common/tests/check_distgen_generated_files.sh || result="failure"
          echo "result=$result" >> "$GITHUB_OUTPUT"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@1.1.5
        with:
          status: ${{ steps.check.outputs.result }}
          context: "Distgen check"
          sha: ${{ steps.check.outputs.sha }}

      - name: Exit on ERR
        shell: bash
        run: |
          _result=${{ steps.check.outputs.result }}
          if [ "$_result" == failure ]; then
            echo "Distgen-generated files are not regenerated properly."
            echo "Please regenerate them with:"
            echo "'make clean-versions'"
            echo "'make generate-all'"
            exit 1
          fi
  container-tests:
    needs: distgen-check
    # This job only runs for '[test]' pull request comments by owner, member
    runs-on: ubuntu-20.04
    name: "Container tests: ${{ matrix.version }} - ${{ matrix.context }}"
    strategy:
      fail-fast: false
      matrix:
        version: [ "10", "11", "12", "13" ]
        os_test: [ "fedora", "centos7", "rhel7", "rhel8", "rhel9", "c9s", "c8s"]
        include:
          - tmt_plan: "fedora"
            os_test: "fedora"
            context: "Fedora"
            compose: "Fedora-latest"
            api_key: "TF_PUBLIC_API_KEY"
            branch: "main"
            tmt_repo: "https://github.com/sclorg/sclorg-testing-farm"
          - tmt_plan: "centos7"
            os_test: "centos7"
            context: "CentOS7"
            compose: "CentOS-7"
            api_key: "TF_PUBLIC_API_KEY"
            branch: "main"
            tmt_repo: "https://github.com/sclorg/sclorg-testing-farm"
          - tmt_plan: "rhel7-docker"
            os_test: "rhel7"
            context: "RHEL7"
            compose: "RHEL-7.9-Released"
            api_key: "TF_INTERNAL_API_KEY"
            branch: "master"
            tmt_repo: "https://gitlab.cee.redhat.com/platform-eng-core-services/sclorg-tmt-plans"
            tf_scope: "private"
          - tmt_plan: "rhel8-docker"
            os_test: "rhel8"
            context: "RHEL8"
            compose: "RHEL-8.6.0-Nightly"
            api_key: "TF_INTERNAL_API_KEY"
            branch: "master"
            tmt_repo: "https://gitlab.cee.redhat.com/platform-eng-core-services/sclorg-tmt-plans"
            tf_scope: "private"
          - tmt_plan: "rhel9-docker"
            os_test: "rhel9"
            context: "RHEL9"
            compose: "RHEL-9.1.0-Nightly"
            api_key: "TF_INTERNAL_API_KEY"
            branch: "master"
            tmt_repo: "https://gitlab.cee.redhat.com/platform-eng-core-services/sclorg-tmt-plans"
            tf_scope: "private"
          - tmt_plan: "c9s"
            os_test: "c9s"
            context: "CentOS Stream 9"
            compose: "CentOS-Stream-9"
            api_key: "TF_PUBLIC_API_KEY"
            branch: "main"
            tmt_repo: "https://github.com/sclorg/sclorg-testing-farm"
          - tmt_plan: "c8s"
            os_test: "c8s"
            context: "CentOS Stream 8"
            compose: "CentOS-Stream-8"
            api_key: "TF_PUBLIC_API_KEY"
            branch: "main"
            tmt_repo: "https://github.com/sclorg/sclorg-testing-farm"

    if: |
      github.event.issue.pull_request
      && (contains(github.event.comment.body, '[test]') || contains(github.event.comment.body, '[test-all]'))
      && contains(fromJson('["OWNER", "MEMBER"]'), github.event.comment.author_association)
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.issue.number }}/head"

      - name: Prepare needed variables
        shell: bash
        id: vars
        run: |
          dockerfile="Dockerfile.${{ matrix.os_test }}"
          if [[ ${{ matrix.os_test }} == "centos7" ]]; then
            dockerfile="Dockerfile"
          fi
          echo "::set-output name=DOCKERFILE_NAME::${dockerfile}"

      - name: Check that ${{ matrix.version }}/${{ steps.vars.outputs.DOCKERFILE_NAME }} is present
        id: check_dockerfile
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ matrix.version }}/${{ steps.vars.outputs.DOCKERFILE_NAME }}"

      # https://github.com/sclorg/testing-farm-as-github-action
      - name: Schedule tests for ${{ matrix.version }} - ${{ matrix.context }}
        id: github_action
        if: steps.check_dockerfile.outputs.files_exists == 'true'
        uses: sclorg/testing-farm-as-github-action@v1
        with:
          api_key: ${{ secrets[matrix.api_key] }}
          git_url: ${{ matrix.tmt_repo }}
          git_ref: ${{ matrix.branch }}
          tf_scope: ${{ matrix.tf_scope }}
          tmt_plan_regex: ${{ matrix.tmt_plan }}
          pull_request_status_name: "${{ matrix.context }} - ${{ matrix.version }}"
          variables: "REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY;REPO_NAME=$GITHUB_REPOSITORY;PR_NUMBER=${{ github.event.issue.number }};SINGLE_VERSION=${{ matrix.version }};OS=${{ matrix.os_test }};TEST_NAME=test"
          compose: ${{ matrix.compose }}
